#!/usr/bin/env bash
set -euo pipefail
IFS=$'\n\t'

set +e
GIT_FORK_HOME="${GIT_FORK_HOME:-$(git config --get fork.home 2>/dev/null)}"
[[ -z $GIT_FORK_HOME ]] && GIT_FORK_HOME=$(pwd)
set -e

PROGRAM="$(basename "${0}")"

# shellcheck disable=SC2034
{
USAGE=$(cat <<EOF
[-h] [-C <path>] <repo>

Given a repository like <https://git.example.org/user/repo.git>, clone the
repository to \`git.example.org/user/repo\`.

$PROGRAM will clone the repository to the first specified path from:

    1. \`-C <path>\`
    2. GIT_FORK_HOME environment variable
    3. \`fork.home\` Git configuration value

If none of these values have been specified, $PROGRAM will clone the repository
to the current directory.

Options
    -h                    show this screen and exit
    -C                    clone to <path>
EOF
)

set +u
SUBDIRECTORY_OK=true
# shellcheck disable=SC1090
. "$(git --exec-path)/git-sh-setup"
set -u
}

clone() {
  local url=$1
  local dir=$2
  local namespace host username repo
  local IFS='/'
  # Assume HTTPS.
  if [[ $url != *://* && $url != *@:* ]]; then
    url="https://${url}"
  fi
  # Isolate host/username/repo components from URL.
  namespace=$url
  if [[ $namespace == *@*:* ]]; then
    namespace="${namespace#*@}"
    namespace="${namespace//:/\/}"
  else
    namespace="${namespace#*//}"
  fi
  namespace="${namespace/%.git/}"
  IFS='/' read host username repo <<< "${namespace}"
  local dest="${dir}/${host}/${username}/${repo}"
  mkdir -p "${dest}"
  git clone "${url}" "${dest}"
}

fork() {
  local upstream=$1
  local repo="${upstream##*/}"
  repo="${repo/%.git/}"
  local origin
  local username
  local host

  case $repo in
    *github*)
      host='https://github.com'
      ;;
    *bitbucket*)
      host='https://bitbucket.com'
      ;;
    *)
      host='https://github.com'
      ;;
  esac

  username=$(git config --get credential.${host}.username)
  origin="${host}/${username}/${repo}"

  git clone -o upstream "${upstream}"
  cd "${repo}"
  git remote add origin "${origin}"
}

main() {
  local repo
  while getopts 'C:h' opt; do
    case $opt in
      C)
        GIT_FORK_HOME=$OPTARG
        ;;
      h)
        usage
        return
        ;;
      *)
        usage
        return 1
        ;;
    esac
  done
  shift $((OPTIND - 1))
  repo="${1:-}"
  [[ -d $GIT_FORK_HOME ]] || die 'error: destination must be directory'
  [[ -n $repo ]] || { usage; return 1; }
  clone "${repo}" "${GIT_FORK_HOME}"
}

main "${@}"
