" vim: set foldmethod=marker:

" XDG {{{
" https://tlvince.com/vim-respect-xdg
set directory=$XDG_CACHE_HOME/vim,~/,/tmp
set backupdir=$XDG_CACHE_HOME/vim,~/,/tmp
set viminfo='100,<50,s10,h,n$XDG_CACHE_HOME/vim/viminfo
set runtimepath=$XDG_DATA_HOME/vim,$XDG_DATA_HOME/vim/after,$VIM,$VIMRUNTIME
set packpath+=$XDG_DATA_HOME/vim
" }}}

" Editing {{{
set expandtab
set shiftwidth=2
set softtabstop=2
set tabstop=2

set formatoptions=cq
set linebreak
set textwidth=80

set backspace=indent,eol,start
" }}}

" Appearance {{{
syntax on
colorscheme molokai

" Change background past column 80.
let &colorcolumn = join(range(&textwidth + 1, 255), ',')
set cursorline
set laststatus=2
set number
" Show mode in Airline.
set noshowmode
"}}}

" Behaviour {{{
set lazyredraw
set mouse=a
set shortmess=I
set splitbelow
set splitright
set updatetime=250
set wildmenu
set wildmode=longest,list,full

" Reset normal/insert mode cursors. DECSCUSR changes apply to the terminal, not
" individual applications. Reset Vim's default cursors to override the ones
" inherited by Bash/readline (~/.inputrc).
" &t_SI: Enter insert mode (blinking pipe).
let &t_SI = "\e[5 q"
" &t_SR: Enter replace mode (blinking underline).
let &t_SR = "\e[3 q"
" &t_EI: Exit insert or replace mode (blinking block).
let &t_EI = "\e[1 q"
" }}}

" Commands {{{
let mapleader=","
cnoreabbrev mk make
" }}}

" Plugins {{{
" Airline
let g:airline#extensions#whitspace#enabled = 0
let g:airline#extensions#virtualenv#enabled = 1
let g:airline#extensions#branch#enabled = 1
let g:airline#extensions#branch#empty_message = ''
let g:airline#extensions#virtualenv#enabled = 1

" vim-go
let g:go_fmt_command = 'goimports'
let g:go_highlight_functions = 1
let g:go_highlight_methods = 1
let g:go_highlight_structs = 1

" vim-ledger
let g:ledger_bin = 'hledger'

" vim-signify
let g:signify_realtime = 1
let g:signify_vcs_list = ['fossil', 'git', 'hg']
let g:signify_cursorhold_normal = 0
let g:signify_cursorhold_insert = 0

" syntastic
let g:syntastic_sh_shellcheck_args = '-s bash'
" }}}

" Functions {{{
" Insert boilerplate for new files.
function! Boilerplate()
  execute '0r ~/.local/share/vim/templates/boilerplate.'.expand('%:e')
endfunction
" }}}

" Autocommands {{{
augroup code
  autocmd!
  " use 4 spaces in Python
  autocmd FileType python setlocal tabstop=4 softtabstop=4 shiftwidth=4
  " use hard tabs for Go, Makefiles, and .gitconfig
  autocmd FileType go,make,gitconfig setlocal noexpandtab tabstop=4 shiftwidth=4
  autocmd Filetype plaintex,tex setlocal makeprg=latexmk\ -pdf\ %
augroup END

augroup writing
  autocmd!
  autocmd FileType markdown,rst,wiki,tex set spell spelllang=en_ca
  autocmd FileType markdown,rst,wiki,tex setlocal textwidth=0
augroup END

augroup templates
  autocmd!
  autocmd BufNewFile *.* silent! call Boilerplate()
augroup END
"}}}

if filereadable(glob('~/.vimrc_local'))
  source ~/.vimrc_local
endif
